#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2021-01-20
# @Filename: command.py
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)

from __future__ import annotations

import asyncio
import enum
import re
import warnings

from archon.exceptions import ArchonUserWarning

__all__ = ["ArchonCommand", "ArchonCommandStatus"]

REPLY_RE = re.compile(b"^([<|?])([0-9A-F]{2})(:?)(.*)\n?$")


class ArchonCommandStatus(enum.Enum):
    """Status of an Archon command."""

    DONE = enum.auto()
    FAILED = enum.auto()
    RUNNING = enum.auto()


class ArchonCommand(asyncio.Future):
    """Tracks the status and replies to a command sent to the Archon.

    ``ArchonCommand`` is a `~asyncio.Future` and can be awaited, at which point the
    command will have completed or failed.

    Parameters
    ----------
    command_string
        The command to send to the Archon. Will be converted to uppercase.
    command_id
        The command id to associate with this message. If not provided, a
        sequential, autogenerated one will be used.
    expected_replies
            How many replies to expect from the controller before the command is done.
    """

    def __init__(self, command_string: str, command_id: int, expected_replies: int = 1):
        self.command_string = command_string.upper()
        self.command_id = command_id
        self._expected_replies = expected_replies

        #: List of str or bytes: List of replies received for this command.
        self.replies: list[str | bytes] = []

        #: .ArchonCommandStatus: The status of the command.
        self.status = ArchonCommandStatus.RUNNING

        if self.command_id < 0 or self.command_id > 2 ** 8:
            raise ValueError("command_id must be between 0x00 and 0xFF")

    @property
    def raw(self):
        """Returns the raw command sent to the Archon (without the newline)."""
        return f">{self.command_id:02x}{self.command_string}"

    def process_reply(self, reply: bytes):
        """Processes a new reply to this command.

        The Archon can reply to a command of the form ``>xxCOMMAND`` (where ``xx``
        is a 2-digit hexadecimal) with ``?xx`` to indicate failure or ``<xxRESPONSE``.
        In the latter case the ``RESPONSE`` ends with a newline. The Archon can also
        reply with ``<xx:bbbbb...bbbb`` with the ``:`` indicating that what follows is
        a binary string with 1024 characters. In this case the reply does not end with
        a newline.

        Parameters
        ----------
        reply
            The received reply, as bytes.
        """
        parsed = REPLY_RE.match(reply)
        if parsed is None:
            warnings.warn(
                f"Received unparseable reply to command {self.raw}: {reply.decode()}",
                ArchonUserWarning,
            )
            self._mark_done(self.status.FAILED)
            return

        rtype, rcid, rbin, rmessage = parsed.groups()
        rtype = rtype.decode()
        rcid = int(rcid, 16)
        rbin = rbin.decode()

        if rcid != self.command_id:
            warnings.warn(
                f"Received reply to command {self.raw} that does not match "
                f"the command id: {reply.decode()}",
                ArchonUserWarning,
            )
            self._mark_done(self.status.FAILED)
            return

        if rtype == "?":
            self._mark_done(self.status.FAILED)
            return

        if rbin == "":
            self.replies.append(rmessage.decode().strip())
        else:
            self.replies.append(rmessage)

        if len(self.replies) == self._expected_replies:
            self._mark_done()

    def _mark_done(self, status: ArchonCommandStatus = ArchonCommandStatus.DONE):
        """Marks the command done with ``status``."""
        self.status = status
        self.set_result(self)

    def __repr__(self):
        return f"<ArchonCommand ({self.raw}, status={self.status})>"

"""
This type stub file was generated by pyright.
"""

import collections
import enum
import logging

REPLY = 5
WARNING_REGEX = r"^.*?\s*?(\w*?Warning): (.*)"
__ALL__ = [
    "CommandStatus",
    "StatusMixIn",
    "format_value",
    "CallbackMixIn",
    "CaseInsensitiveDict",
    "cli_coro",
    "value",
    "as_complete_failer",
    "log_reply",
    "ActorHandler",
]

class Maskbit(enum.Flag):
    """A maskbit enumeration. Intended for subclassing."""

    @property
    def active_bits(self):
        """Returns a list of non-combination flags that match the value."""
        ...

COMMAND_STATUS_TO_CODE = {
    "DONE": ":",
    "CANCELLED": "f",
    "FAILED": "f",
    "TIMEDOUT": "f",
    "READY": "i",
    "RUNNING": ">",
    "CANCELLING": "w",
    "FAILING": "w",
    "DEBUG": "d",
}

class CommandStatus(Maskbit):
    DONE = ...
    CANCELLED = ...
    FAILED = ...
    TIMEDOUT = ...
    READY = ...
    RUNNING = ...
    CANCELLING = ...
    FAILING = ...
    DEBUG = ...
    ACTIVE_STATES = ...
    FAILED_STATES = ...
    FAILING_STATES = ...
    DONE_STATES = ...
    ALL_STATES = ...
    def __init__(self, *args) -> None: ...
    @property
    def is_combination(self):
        """Returns True if a flag is a combination."""
        ...
    @property
    def did_fail(self):
        """Command failed or was cancelled."""
        ...
    @property
    def did_succeed(self):
        """Command finished with DONE status."""
        ...
    @property
    def is_active(self):
        """Command is running, cancelling or failing."""
        ...
    @property
    def is_done(self):
        """Command is done (whether successfully or not)."""
        ...
    @property
    def is_failing(self):
        """Command is being cancelled or is failing."""
        ...
    @staticmethod
    def code_to_status(code, default=...):
        """Returns the status associated with a code.

        If the code doesn't have an associated status, returns ``default``.
        ``default`` defaults to `.CommandStatus.RUNNING`.

        """
        ...

class StatusMixIn(object):
    """A mixin that provides status tracking with callbacks.

    Provides a status property that executes a list of callbacks when
    the status changes.

    Parameters
    ----------
    maskbit_flags : class
        A class containing the available statuses as a series of maskbit
        flags. Usually as subclass of `enum.Flag`.
    initial_status : str
        The initial status.
    callback_func : function
        The function to call if the status changes.
    call_now : bool
        Whether the callback function should be called when initialising.

    Attributes
    ----------
    callbacks : list
        A list of the callback functions to call.

    """

    def __init__(
        self, maskbit_flags, initial_status=..., callback_func=..., call_now=...
    ) -> None: ...
    def do_callbacks(self):
        """Calls functions in ``callbacks``."""
        ...
    @property
    def status(self):
        """Returns the status."""
        ...
    @status.setter
    def status(self, value):
        """Sets the status."""
        ...
    async def wait_for_status(self, value):
        """Awaits until the status matches ``value``."""
        ...

class CallbackMixIn(object):
    """A mixin for executing callbacks.

    Parameters
    ----------
    callbacks : list
        A list of functions or coroutines to be called.

    """

    def __init__(self, callbacks=..., loop=...) -> None: ...
    async def stop_callbacks(self):
        """Cancels any running callback task."""
        ...
    def register_callback(self, callback_func):
        """Adds a callback function or coroutine function."""
        ...
    def remove_callback(self, callback_func):
        """Removes a callback function."""
        ...
    def notify(self, *args):
        """Calls the callback functions with some arguments.

        Coroutine callbacks are scheduled as a task. Synchronous callbacks
        are scheduled with ``call_soon``.

        """
        ...

def format_value(value):
    """Formats messages in a way that is compatible with the parser.

    Parameters
    ----------
    value
        The data to be formatted.

    Returns
    -------
    formatted_text : `str`
        A string with the escaped text.

    """
    ...

def escape(value):
    """Escapes a text using `json.dumps`."""
    ...

class CaseInsensitiveDict(collections.OrderedDict):
    """A dictionary that performs case-insensitive operations."""

    def __init__(self, values) -> None: ...
    def __get_key__(self, key):
        """Returns the correct value of the key, regardless of its case."""
        ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __contains__(self, key): ...
    def __eq__(self, key) -> bool: ...

def cli_coro(f):
    """Decorator function that allows defining coroutines with click."""
    ...

async def as_complete_failer(aws, on_fail_callback=..., **kwargs):
    """Similar to `~asyncio.as_complete` but cancels all the tasks
    if any of them returns `False`.

    Parameters
    ----------
    aws : list
        A list of awaitable objects. If not a list, it will be wrapped in one.
    on_fail_callback
        A function or coroutine to call if any of the tasks failed.
    kwargs : dict
        A dictionary of keywords to be passed to `~asyncio.as_complete`.

    Returns
    -------
    result_tuple : tuple
        A tuple in which the first element is `True` if all the tasks
        completed, `False` if any of them failed and the rest were cancelled.
        If `False`, the second element is `None` if no exceptions were caught
        during the execution of the tasks, otherwise it contains the error
        message. If `True`, the second element is always `None`.

    """
    ...

def log_reply(log, message_code, message, use_message_code=...):
    """Logs an actor message with the correct code."""
    ...

class ActorHandler(logging.Handler):
    """A handler that outputs log messages as actor keywords.

    Parameters
    ----------
    actor
        The actor instance.
    level : int
        The level above which records will be output in the actor.
    keyword : str
        The keyword around which the messages will be output.
    code_mapping : dict
        A mapping of logging levels to actor codes. The values provided
        override the default mapping. For example, to make input log messages
        with info level be output as debug,
        ``code_mapping={logging.INFO: 'd'}``.
    filter_warnings : list
        A list of warning classes that will be issued to the actor. Subclasses
        of the filter warning are accepted, any other warnings will be ignored.

    """

    def __init__(
        self, actor, level=..., keyword=..., code_mapping=..., filter_warnings=...
    ) -> None: ...
    def emit(self, record):
        """Emits the record."""
        ...

"""
This type stub file was generated by pyright.
"""

from typing import Callable

from .protocol import TCPStreamClient
from .tools import CallbackMixIn

class Device(CallbackMixIn):
    """A class that handles the TCP connection to a device.

    There are two ways to create a new device. You can create a subclass from
    `.Device` and override the `.process_message` method which handles how you
    react to a new line being received ::

        class MyDevice(Device):

            async def process_message(self, line):
                print(line)

        my_device = MyDevice('192.168.1.10', 4444)
        await my_device.start()

    Note that `.process_message` must be a coroutine. Alternatively you can
    pass a callback that will be called instead of `.process_message` when
    a new message arrives. The callback must also be a coroutine ::

        async def printer(line):
            print(line)

        my_device = MyDevice('192.168.1.10', 4444, callback=printer)
        await my_device.start()


    Parameters
    ----------
    host : str
        The host of the device.
    port : int
        The port on which the device is serving.
    callback
        The callback to call with each new message received from the client.
        If no callback is specified, `.process_message` is called. If the
        callback is not a coroutine, it will be converted to one.

    """

    def __init__(
        self,
        host: str,
        port: int,
        callback: Callable[[bytes], None] = ...,
        decode: bool = ...,
    ) -> None:
        """Constructor"""
        self.host: str
        self.port: int
        self._client: TCPStreamClient
        ...
    async def start(self) -> None:
        """Opens the connection and starts the listener."""
        ...
    async def stop(self) -> None:
        """Closes the connection and stops the listener."""
        ...
    def is_connected(self) -> bool:
        """Returns `True` if the connection is open."""
        ...
    def write(self, message: str, newline: str = ...) -> None:
        """Write to the device. The message is encoded and a new line added."""
        ...
    async def process_message(self, line: bytes) -> None:
        """Processes a newly received message."""
        ...
